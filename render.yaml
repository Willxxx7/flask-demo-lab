# Render blueprint for Flask demo lab
# Students can edit this file to customize container deployment

services:
  - type: web                  # Web service (Flask app)
    name: flask-demo-lab       # Name of the service in Render
    env: docker                # Use Docker container
    branch: main               # Branch to deploy from
    dockerfilePath: Dockerfile # Path to Dockerfile (root of repo)
    plan: free                 # Free tier for students

    # Start command inside the container
    # Do NOT include `docker run` here; Render runs the container automatically
    # startCommand: flask --app app run --host=0.0.0.0 --port=5000

    # Environment variables
    envVars:
      - key: FLASK_ENV
        value: production
      - key: SECRET_KEY
        value: "CHANGE_THIS_TO_A_SECRET"  # Students should change this

    # Optional: mount a volume for persistent storage
    # Students can uncomment and configure if they want to store files
    # volumes:
    #   - name: flask-data
    #     mountPath: /app/data

# Health check configuration:
# Render UI currently manages health checks via the service settings.
# To enable:
#   1. Go to your web service in Render.
#   2. Open "Health Checks".
#   3. Set the Path to `/health` (your Flask app must have @app.route("/health"))
#   4. Set "Check Interval" to 300 seconds (5 minutes).
#   5. Set Timeout to 5 seconds, Healthy Threshold to 1, Unhealthy Threshold to 3.

# Notes for students:
# 1. Ensure your Flask app has a `/health` endpoint returning JSON, e.g.:
#       @app.route("/health")
#       def health():
#           return jsonify({"status": "ok"})
# 2. All development should happen in your fork or local clone.
# 3. Commit changes to GitHub; Render will auto-deploy from your repo branch.
#code on Health you can uncomment or add your new code for this if required - alot is handled through the render dashboard though!
    # Health check for monitoring container
   # healthCheckPath: /health
   # healthCheckIntervalSeconds: 60       # Check every 60 seconds
   # healthCheckTimeoutSeconds: 5         # Timeout after 5 seconds
   # healthCheckHealthyThreshold: 1       # Healthy after 1 success
   # healthCheckUnhealthyThreshold: 3     # Unhealthy after 3 failures

    # Optional: mount a volume for persistent storage
    # Students can uncomment the next lines if they want to store files
    # volumes:
    #   - name: flask-data
    #     mountPath: /app/data
# Notes for students:
# 1.	The /health endpoint in app.py must exist; otherwise, Render will mark the container as unhealthy.
# 2.	SECRET_KEY should be updated per student for security.
# 3.	Optional volume mounting allows storing uploaded files or logs persistently.
# 4.	The docker run -p 10000:5000 maps container port 5000 to Render port 10000 — students don’t need to change this for now.

